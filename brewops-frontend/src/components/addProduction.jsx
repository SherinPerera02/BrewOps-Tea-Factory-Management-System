import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import toast from 'react-hot-toast';
import { useNavigate } from 'react-router-dom';

import Spinner from '../components/Spinner';
import './addProduction.css';

const AddProduction = () => {
  const [quantity, setQuantity] = useState('');
  const [loading, setLoading] = useState(false);
  const [quantityError, setQuantityError] = useState('');
  const [createdProductionId, setCreatedProductionId] = useState('');
  const [preGeneratedProductionId, setPreGeneratedProductionId] = useState('');
  const navigate = useNavigate();
  const quantityRef = useRef(null);

  useEffect(() => {
    // pre-generate production id in format PROD-YYYYMMDD-HHMM using local time
    const pad = (n) => n.toString().padStart(2, '0');
    const now = new Date();
    const year = now.getFullYear();
    const month = pad(now.getMonth() + 1);
    const day = pad(now.getDate());
    const hours = pad(now.getHours());
    const minutes = pad(now.getMinutes());
    const generated = `PROD-${year}${month}${day}-${hours}${minutes}`;
    setPreGeneratedProductionId(generated);
  }, []);

  useEffect(() => {
    // focus the quantity input when modal finishes loading
    if (!loading) {
      setTimeout(() => {
        quantityRef.current?.focus();
      }, 0);
    }
  }, [loading]);

  const handleSaveProduction = () => {
    if (quantityError || !quantity) {
      toast.error('Please fill all fields correctly');
      return;
    }
    if (quantity <= 0) {
      toast.error('Quantity must be greater than 0');
      return;
    }
    const data = {
      quantity: parseInt(quantity),
    };
    setLoading(true);
    axios
      .post('http://localhost:5000/production', data)
      .then((response) => {
        setLoading(false);
        // Display the auto-generated production ID and saved quantity from backend
        if (response.data && response.data.data && response.data.data.productionid) {
          setCreatedProductionId(response.data.data.productionid);
          // If backend returns the saved quantity, set it; otherwise use the local value
          const savedQty = response.data.data.quantity ?? parseInt(quantity);
          setQuantity(savedQty.toString());
          toast.success(`Production record created! ID: ${response.data.data.productionid}`);
        } else {
          // Fallback: use pre-generated id for display and local quantity
          setCreatedProductionId(preGeneratedProductionId);
          toast.success('Production record created!');
        }
        setTimeout(() => navigate('/production'), 1500);
      })
      .catch((error) => {
        console.error('Error saving production:', error);
        toast.error('An error occurred while saving production');
        setLoading(false);
      });
  };

  useEffect(() => {
    // Real-time validation for quantity
    if (quantity.length > 6) {
      setQuantityError('Quantity must not exceed 6 digits');
    } else if (quantity && parseInt(quantity) <= 0) {
      setQuantityError('Quantity must be greater than 0');
    } else {
      setQuantityError('');
    }
  }, [quantity]);

  const handleQuantityChange = (e) => {
    const value = e.target.value;
    if (value.length <= 6) {
      setQuantity(value);
    }
  };

  return (
    <div className="ap-root">
      {/* Modal backdrop */}
      <div className='ap-backdrop' onClick={() => navigate('/production')}>
        <div className='ap-container' onClick={(e) => e.stopPropagation()}>
          <h1 className='ap-title'>Add Production</h1>

          {/* Live preview: always show the pre-generated Production ID and current quantity */}
          <div className='ap-preview'>
            <div className='ap-preview-row'>
              <div>
                <div className='ap-preview-label'>Auto-generated Production ID</div>
                <div className='ap-preview-id'>{createdProductionId || preGeneratedProductionId || 'Generating...'}</div>
              </div>
              <div className='ap-preview-right'>
                <div className='ap-preview-label'>Quantity (kg)</div>
                <div className='ap-preview-qty'>{quantity ? `${quantity} kg` : 'â€”'}</div>
              </div>
            </div>
          </div>

          {loading && <Spinner />}

          {!loading && (
            <div className='ap-form-space'>
              <div className='ap-field'>
                <label className='ap-label'>Production Number</label>
                <input
                  type="text"
                  value={createdProductionId || preGeneratedProductionId || ''}
                  placeholder={createdProductionId || preGeneratedProductionId ? '' : 'Will be generated by server (PROD-YYYYMMDD-HHMM)'}
                  disabled
                  className='ap-input'
                />
                <p className='ap-note'>Production ID is auto-generated by the server.</p>
              </div>

              <div className='ap-field'>
                <label className='ap-label'>Quantity (kg)</label>
                <input
                  type="number"
                  ref={quantityRef}
                  value={quantity}
                  onChange={handleQuantityChange}
                  min="1"
                  max="999999"
                  placeholder="Enter quantity in kilograms"
                  className={`ap-input ${quantityError ? 'ap-input-error' : ''}`}
                />
                {quantityError && <div className="ap-error">{quantityError}</div>}
                <p className='ap-note'>* Enter the quantity of production in kilograms (max 6 digits)</p>
              </div>

              <div className='ap-actions'>
                <button 
                  className='btn-primary' 
                  onClick={handleSaveProduction}
                  disabled={loading || quantityError || !quantity}
                >
                  {loading ? 'Saving...' : 'Save Production'}
                </button>

                <button 
                  className='btn-secondary' 
                  onClick={() => navigate('/production')}
                >
                  Cancel
                </button>
              </div>
            </div>
          )}

          {/* Success panel shown when a production has been created */}
          {!loading && createdProductionId && (
            <div className='success-panel'>
              <h2 className='success-title'>Production Created</h2>
              <p className='ap-note'>
                Production ID: <span className='ap-preview-id'>{createdProductionId}</span>
              </p>
              <p className='ap-note'>
                Quantity: <span className='ap-quantity'>{quantity} kg</span>
              </p>

              <div className='ap-actions ap-success-actions'>
                <button
                  className='btn-primary'
                  onClick={() => {
                    // Reset form to create another production
                    setCreatedProductionId('');
                    setQuantity('');
                    setQuantityError('');
                    // re-generate a fresh preGeneratedProductionId
                    const pad = (n) => n.toString().padStart(2, '0');
                    const now = new Date();
                    const year = now.getFullYear();
                    const month = pad(now.getMonth() + 1);
                    const day = pad(now.getDate());
                    const hours = pad(now.getHours());
                    const minutes = pad(now.getMinutes());
                    const generated = `PROD-${year}${month}${day}-${hours}${minutes}`;
                    setPreGeneratedProductionId(generated);
                    setTimeout(() => quantityRef.current?.focus(), 0);
                  }}
                >
                  Create Another
                </button>

                <button
                  className='btn-secondary'
                  onClick={() => navigate('/production')}
                >
                  Back to Production
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default AddProduction;
